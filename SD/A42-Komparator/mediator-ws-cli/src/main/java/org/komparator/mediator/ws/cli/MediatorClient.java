package org.komparator.mediator.ws.cli;

import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

import java.net.ConnectException;
import java.net.SocketTimeoutException;
import java.util.ArrayList;

import java.math.BigInteger;
import java.security.SecureRandom;

import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.xml.ws.BindingProvider;
import javax.xml.ws.WebServiceException;

import org.komparator.mediator.ws.*;
import org.komparator.security.CryptoUtil;

import pt.ulisboa.tecnico.sdis.ws.uddi.UDDINaming;


/**
 * Client.
 *
 * Adds easier endpoint address configuration and 
 * UDDI lookup capability to the PortType generated by wsimport.
 */
public class MediatorClient implements MediatorPortType {
	
	String lastId = null;
	Boolean newIdNeeded = true;
			
	/** WS service */
    MediatorService service = null;

	/** WS port (port type is the interface, port is the implementation) */
	MediatorPortType port = null;

    /** UDDI server URL */
    private String uddiURL = null;

    /** WS name */
    private String wsName = null;

    /** WS endpoint address */
    private String wsURL = null; // default value is defined inside WSDL

    public String getWsURL() {
        return wsURL;
    }
    
    /** output option **/
    private boolean verbose = false;

    public boolean isVerbose() {
        return verbose;
    }

    public void setVerbose(boolean verbose) {
        this.verbose = verbose;
    }

    /** constructor with provided web service URL */
    public MediatorClient(String wsURL) throws MediatorClientException {
        this.wsURL = wsURL;
        createStub();
        identifyRequest();
    }

    /** constructor with provided UDDI location and name */
    public MediatorClient(String uddiURL, String wsName) throws MediatorClientException {
        this.uddiURL = uddiURL;
        this.wsName = wsName;
        CryptoUtil.setName(wsName);
        uddiLookup();
        createStub();
        identifyRequest();
    }

    /** UDDI lookup */
    private void uddiLookup() throws MediatorClientException {
        try {
            if (verbose)
                System.out.printf("Contacting UDDI at %s%n", uddiURL);
            UDDINaming uddiNaming = new UDDINaming(uddiURL);

            if (verbose)
                System.out.printf("Looking for '%s'%n", wsName);
            wsURL = uddiNaming.lookup(wsName);

        } catch (Exception e) {
            String msg = String.format("Client failed lookup on UDDI at %s!",
                    uddiURL);
            throw new MediatorClientException(msg, e);
        }

        if (wsURL == null) {
            String msg = String.format(
                    "Service with name %s not found on UDDI at %s", wsName,
                    uddiURL);
            throw new MediatorClientException(msg);
        }
    }

    /** Stub creation and configuration */
    private void createStub() {

        if (verbose)
            System.out.println("Creating stub ...");
        service = new MediatorService();
        port = service.getMediatorPort();

        if (wsURL != null) {
           if (verbose)
                System.out.println("Setting endpoint address ...");
            BindingProvider bindingProvider = (BindingProvider) port;
            Map<String, Object> requestContext = bindingProvider.getRequestContext();
            requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);
        
	        int receiveTimeout = 15000;
		    // The receive timeout property has alternative names
		    // Again, set them all to avoid compability issues
		    final List<String> RECV_TIME_PROPS = new ArrayList<String>();
		    RECV_TIME_PROPS.add("com.sun.xml.ws.request.timeout");
		    RECV_TIME_PROPS.add("com.sun.xml.internal.ws.request.timeout");
		    RECV_TIME_PROPS.add("javax.xml.ws.client.receiveTimeout");
		    // Set timeout until the response is received (unit is milliseconds; 0 means infinite)
		    for (String propName : RECV_TIME_PROPS)
		        requestContext.put(propName, 15000);
		    System.out.printf("Set receive timeout to %d milliseconds%n", receiveTimeout);
        }
    }
    
    /** Identify request **/
    private void identifyRequest() {
    	BindingProvider bindingProvider = (BindingProvider) port;
    	Map<String, Object> requestContext = bindingProvider.getRequestContext();
    	
    	if (newIdNeeded){
	    	SecureRandom random = new SecureRandom();
			String id = new BigInteger(130, random).toString(32).toUpperCase();
			requestContext.put("IDENTIFIER", id);
			lastId = id;
    	} else {
    		requestContext.put("IDENTIFIER", lastId);
    	}

    }


    // remote invocation methods ----------------------------------------------
    
   
    @Override
	public void clear() {
    	try{
    		port.clear();
    	} catch (WebServiceException e) {
    		System.out.println("Caught: " + e);
	        Throwable cause = e.getCause();
	        if (cause != null && cause instanceof SocketTimeoutException) {
	            System.out.println("The cause was a timeout exception: " + cause);
	        }
	        try{
		        uddiLookup();
		        createStub();
	        }
	        catch(MediatorClientException ex){
	        	clear();
	        }
	        clear();
    	}
    }

    @Override
	public String ping(String arg0) {
    	try{
    		return port.ping(arg0);
    	} catch (WebServiceException e) {
    		System.out.println("Caught: " + e);
	        Throwable cause = e.getCause();
	        if (cause != null && cause instanceof SocketTimeoutException) {
	            System.out.println("The cause was a timeout exception: " + cause);
	        }
	        try{
		        uddiLookup();
		        createStub();
	        }
	        catch(MediatorClientException ex){
	        	return port.ping(arg0);
	        }
	        return port.ping(arg0);
    	}
    }

    @Override
	public List<ItemView> searchItems(String descText) throws InvalidText_Exception {
    	try{
    		return port.searchItems(descText);
    	} catch (WebServiceException e) {
    		System.out.println("Caught: " + e);
	        Throwable cause = e.getCause();
	        if (cause != null && cause instanceof SocketTimeoutException) {
	            System.out.println("The cause was a timeout exception: " + cause);
	        }
	        try{
		        uddiLookup();
		        createStub();
	        }
	        catch(MediatorClientException ex){
	        	return port.searchItems(descText);
	        }
	        return port.searchItems(descText);
    	}
	}

    @Override
	public List<CartView> listCarts() {
		try{
			return port.listCarts();
    	} catch (WebServiceException e) {
    		System.out.println("Caught: " + e);
	        Throwable cause = e.getCause();
	        if (cause != null && cause instanceof SocketTimeoutException) {
	            System.out.println("The cause was a timeout exception: " + cause);
	        }
	        try{
		        uddiLookup();
		        createStub();
	        }
	        catch(MediatorClientException ex){
	        	return port.listCarts();
	        }
	        return port.listCarts();
    	}
    }

	@Override
	public List<ItemView> getItems(String productId) throws InvalidItemId_Exception {
		try{
			return port.getItems(productId);
    	} catch (WebServiceException e) {
    		System.out.println("Caught: " + e);
	        Throwable cause = e.getCause();
	        if (cause != null && cause instanceof SocketTimeoutException) {
	            System.out.println("The cause was a timeout exception: " + cause);
	        }
	        try{
		        uddiLookup();
		        createStub();
	        }
	        catch(MediatorClientException ex){
	        	return port.getItems(productId);
	        }
	        return port.getItems(productId);
    	}
	}

	@Override
	public ShoppingResultView buyCart(String cartId, String creditCardNr)
		throws EmptyCart_Exception, InvalidCartId_Exception, InvalidCreditCard_Exception {
		try{
			identifyRequest();
			ShoppingResultView res = port.buyCart(cartId, creditCardNr);
			newIdNeeded = true;
			return res;
		} catch(WebServiceException e) {
			newIdNeeded = false;
	        System.out.println("Caught: " + e);
	        Throwable cause = e.getCause();
	        if (cause != null && cause instanceof SocketTimeoutException) {
	            System.out.println("The cause was a timeout exception: " + cause);
	        }
	        try{
		        uddiLookup();
		        createStub();
	        }
	        catch(MediatorClientException ex){
	        	return buyCart(cartId, creditCardNr);
	        }
	        return buyCart(cartId, creditCardNr);
	    }
	}

	@Override
	public void addToCart(String cartId, ItemIdView itemId, int itemQty) throws InvalidCartId_Exception,
			InvalidItemId_Exception, InvalidQuantity_Exception, NotEnoughItems_Exception {

		try{
			identifyRequest();
			port.addToCart(cartId, itemId, itemQty);
			newIdNeeded = true;
		} catch(WebServiceException e) {
			newIdNeeded = false;
	        System.out.println("Caught: " + e);
	        Throwable cause = e.getCause();
	        if (cause != null && cause instanceof SocketTimeoutException) {
	            System.out.println("The cause was a timeout exception: " + cause);
	        }
	        try{
		        uddiLookup();
		        createStub();
	        }
	        catch(MediatorClientException ex){
	        	addToCart(cartId, itemId, itemQty);
	        }
	        addToCart(cartId, itemId, itemQty);
        }
	}

	@Override
	public List<ShoppingResultView> shopHistory() {
		
		try{
			return port.shopHistory();
    	} catch (WebServiceException e) {
    		System.out.println("Caught: " + e);
	        Throwable cause = e.getCause();
	        if (cause != null && cause instanceof SocketTimeoutException) {
	            System.out.println("The cause was a timeout exception: " + cause);
	        }
	        try{
		        uddiLookup();
		        createStub();
	        }
	        catch(MediatorClientException ex){
	        	return port.shopHistory();
	        }
	        return port.shopHistory();
    	}
	}
	
	@Override
	public void imAlive() {
		
		try{
			port.imAlive();
    	} catch (WebServiceException e) {
    		System.out.println("Caught: " + e);
	        Throwable cause = e.getCause();
	        if (cause != null && cause instanceof SocketTimeoutException) {
	            System.out.println("The cause was a timeout exception: " + cause);
	        }
	        try{
		        uddiLookup();
		        createStub();
	        }
	        catch(MediatorClientException ex){
	        	port.imAlive();
	        }
	        port.imAlive();
    	}
	}

	@Override
	public void updateHistory(String command, ShoppingResultView shopResult, String requestId) {
		
		try{
			port.updateHistory(command, shopResult, requestId);
    	} catch (WebServiceException e) {
    		System.out.println("Caught: " + e);
	        Throwable cause = e.getCause();
	        if (cause != null && cause instanceof SocketTimeoutException) {
	            System.out.println("The cause was a timeout exception: " + cause);
	        }
	        try{
		        uddiLookup();
		        createStub();
	        }
	        catch(MediatorClientException ex){
	        	port.updateHistory(command, shopResult, requestId);
	        }
	        port.updateHistory(command, shopResult, requestId);
    	}
	}

	@Override
	public void updateCarts(String command, CartView cart, String requestId) {
		
		try{
			port.updateCarts(command, cart, requestId);
    	} catch (WebServiceException e) {
    		System.out.println("Caught: " + e);
	        Throwable cause = e.getCause();
	        if (cause != null && cause instanceof SocketTimeoutException) {
	            System.out.println("The cause was a timeout exception: " + cause);
	        }
	        try{
		        uddiLookup();
		        createStub();
	        }
	        catch(MediatorClientException ex){
	        	port.updateCarts(command, cart, requestId);
	        }
	        port.updateCarts(command, cart, requestId);
    	}
	}

}